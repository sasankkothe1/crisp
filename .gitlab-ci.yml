# stages:
#   - build
#   - rules
#   - launch
#   - push
#   - deploy

# image: docker:20.10.7

# services:
#   - docker:20.10.7-dind

# variables:
#   DOCKER_TLS_CERTDIR: "/certs"
#   BACKEND_IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/backend:$CI_COMMIT_SHA
#   FRONTEND_IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG/frontend:$CI_COMMIT_SHA

# before_script:
#   - cp $CD_DOCKER_COMPOSE_ENV .env
#   - echo "CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE" >> .env
#   - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# build_backend:
#   stage: build
#   script:
#     - docker build -t $BACKEND_IMAGE_TAG ./backend
#     - docker push $BACKEND_IMAGE_TAG

# build_frontend:
#   stage: build
#   script:
#     - docker build -t $FRONTEND_IMAGE_TAG ./frontend
#     - docker push $FRONTEND_IMAGE_TAG

# check_format_backend:
#   stage: rules
#   script:
#     - docker pull $BACKEND_IMAGE_TAG
#     - docker run --entrypoint '/bin/sh' $BACKEND_IMAGE_TAG -c 'npm run check_format'
#   allow_failure: true

# check_format_frontend:
#   stage: rules
#   script:
#     - docker pull $FRONTEND_IMAGE_TAG
#     - docker run --entrypoint '/bin/sh' $FRONTEND_IMAGE_TAG -c 'npm run check_format'
#   allow_failure: true

# lint_backend:
#   stage: rules
#   script:
#     - docker pull $BACKEND_IMAGE_TAG
#     - docker run --entrypoint '/bin/sh' $BACKEND_IMAGE_TAG -c 'npm run lint'

# lint_frontend:
#   stage: rules
#   script:
#     - docker pull $FRONTEND_IMAGE_TAG
#     - docker run --entrypoint '/bin/sh' $FRONTEND_IMAGE_TAG -c 'npm run lint'
  
# launch_backend:
#   stage: launch
#   variables:
#     APP_NAME: crisp
#     PORT: 4000
#   script:
#     - docker pull $BACKEND_IMAGE_TAG
#     - docker run -d -e MONGODB_URI=$CI_MONGODB_URI -e PORT=$PORT -p $PORT:$PORT --name $APP_NAME $BACKEND_IMAGE_TAG
#     - sleep 60
#     - STATUS=$(docker inspect -f {{.State.Status}} $APP_NAME)
#     - if [[ "$STATUS" == "exited" ]]; then docker logs $APP_NAME && exit 1; else echo "Successful launch"; fi
#     - apk add --no-cache curl
#     - curl http://docker:$PORT/

# push:
#   stage: push
#   script:
#     - apk --update add docker-compose
#     - docker-compose build
#     - docker-compose push 
#   only:
#     - develop

# deploy:
#   stage: deploy
#   script:
#     - apk update 
#     - apk add openssh-client
#     - apk add docker-compose
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY" | ssh-add -
#     - mkdir -p ~/.ssh
#     - ssh-keyscan -H "$CD_SERVER_IP" >> ~/.ssh/known_hosts
#     - docker-compose -H "ssh://$CD_USER@$CD_SERVER_IP" down
#     - docker-compose -H "ssh://$CD_USER@$CD_SERVER_IP" pull
#     - docker-compose -H "ssh://$CD_USER@$CD_SERVER_IP" up -d
#   only:
#     - develop
